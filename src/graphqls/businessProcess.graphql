mutation createBusinessProcess($input: CreateBusinessProcessInput!) {
  createBusinessProcess(input: $input) {
    businessProcess {
      ancestry
      id
      name
    }
  }
}

query businessProcesses($filter: BaseScalar = {}) {
  businessProcesses(filter: $filter) {
    collection {
      ancestry
      id
      name
      parentId
    }
  }
}

query businessProcessTree($filter: BaseScalar = {}, $isTree: Boolean = true) {
  businessProcesses(filter: $filter) {
    collection {
      ...businessProcessBranch
      children @include (if: $isTree) {
        ...businessProcessBranch
        children {
          ...businessProcessBranch
          children {
            ...businessProcessBranch
            children {
              ...businessProcessBranch
              children {
                ...businessProcessBranch
              }
            }
          }
        }
      }
    }
  }
}

fragment businessProcessBranch on BusinessProcess {
  ancestry
  id
  name
  parentId
}

mutation destroyBusinessProcess($input: DestroyBusinessProcessInput!) {
  destroyBusinessProcess(input: $input) {
    businessProcess {
      ancestry
      id
      name
    }
  }
}

query businessProcess($id: ID!) {
  businessProcess(id: $id) {
    ancestry
    id
    name
    parentId
    children {
      name
      id
      ancestry
    }
    risks {
      name
      typeOfRisk
      levelOfRisk
      controls {
        description
        id
        nature
        ipo
        nature
        assertion
        frequency
        typeOfControl
        controlOwner
      }
    }
    resources {
      name
      id
      rating
      visit
      resuploadUrl
      totalRating
    }
  }
}

mutation updateBusinessProcess($input: UpdateBusinessProcessInput!) {
  updateBusinessProcess(input: $input) {
    businessProcess {
      ancestry
      id
      name
    }
  }
}

mutation createSubBusinessProcess($input: CreateSubBusinessProcessInput!) {
  createSubBusinessProcess(input: $input) {
    businessProcess {
      ancestry
      id
      name
    }
  }
}
