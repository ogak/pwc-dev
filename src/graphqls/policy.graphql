query policies(
  $filter: BaseScalar = {}
  $withDetail: Boolean = false
  $limit: Int
) {
  policies(filter: $filter, limit: $limit) {
    collection {
      id
      title
      status
      policyCategoryId
      parentId
      policyCategory {
        id
        name
      }
      ancestry
      description
      ...policyFragment @include(if: $withDetail)
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}
query searchPolicies($filter: BaseScalar = {}, $limit: Int, $page: Int) {
  policies(filter: $filter, limit: $limit, page: $page) {
    collection {
      id
      title
      status
      policyCategoryId
      parentId
      policyCategory {
        id
        name
      }
      ancestry
      description
      ...policyFragment
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}

query policyTree(
  $filter: BaseScalar = {}
  $isTree: Boolean!
  $limit: Int
  $page: Int
) {
  policies(filter: $filter, limit: $limit, page: $page) {
    collection {
      ...policyBranch
      children @include(if: $isTree) {
        ...policyBranch
        children {
          ...policyBranch
          children {
            ...policyBranch
            children {
              ...policyBranch
              children {
                ...policyBranch
              }
            }
          }
        }
      }
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}
query sideboxPolicy(
  $filter: BaseScalar = {}
  $isTree: Boolean!
  $limit: Int
  $page: Int
) {
  sidebarPolicies(filter: $filter, limit: $limit, page: $page) {
    collection {
      ...policyBranch
      children @include(if: $isTree) {
        ...policyBranch
        children {
          ...policyBranch
          children {
            ...policyBranch
            children {
              ...policyBranch
              children {
                ...policyBranch
              }
            }
          }
        }
      }
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}

query reviewerPolicies(
  $filter: BaseScalar = {}
  $isTree: Boolean!
  $limit: Int
  $page: Int
) {
  reviewerPoliciesStatus(filter: $filter, limit: $limit, page: $page) {
    collection {
      ...policyBranch
      draft {
        id
      }
      isSubmitted
      children @include(if: $isTree) {
        ...policyBranch
        children {
          ...policyBranch
          children {
            ...policyBranch
            children {
              ...policyBranch
              children {
                ...policyBranch
              }
            }
          }
        }
      }
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}
query preparerPolicies(
  $filter: BaseScalar = {}
  $isTree: Boolean!
  $limit: Int
  $page: Int
) {
  preparerPolicies(filter: $filter, limit: $limit, page: $page) {
    collection {
      ...policyBranch

      children @include(if: $isTree) {
        ...policyBranch
        children {
          ...policyBranch
          children {
            ...policyBranch
            children {
              ...policyBranch
              children {
                ...policyBranch
              }
            }
          }
        }
      }
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}

query userPolicies(
  $filter: BaseScalar = {}
  $isTree: Boolean!
  $limit: Int
  $page: Int
) {
  userPolicies(filter: $filter, limit: $limit, page: $page) {
    collection {
      ...policyBranch
      children @include(if: $isTree) {
        ...policyBranch
        children {
          ...policyBranch
          children {
            ...policyBranch
            children {
              ...policyBranch
              children {
                ...policyBranch
              }
            }
          }
        }
      }
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}
fragment policyBranch on Policy {
  id
  title
  parentId
  status
  ancestry
  lastUpdatedAt
  lastUpdatedBy
  draft {
    id
  }
  isSubmitted
  requestStatus
  policyCategory {
    id
    name
  }
}

query policy($id: ID!, $withChild: Boolean = false) {
  policy(id: $id) {
    description
    ...policyFragment
    children @include(if: $withChild) {
      ...policyFragment
      children {
        ...policyFragment
        children {
          ...policyFragment
          children {
            ...policyFragment
            children {
              ...policyFragment
            }
          }
        }
      }
    }
    ancestors {
      id
      title
    }
    draft {
      id
      objectResult {
        ... on Policy {
          id
          title
          status
          policyCategory {
            id
            name
          }
          ancestry
          description
          parentId
          references {
            id
            name
          }
        }
      }
      objectChanges
    }
    isSubmitted
    trueVersion
    hasEditAccess
    requestStatus
    status
    updatedAt
    lastUpdatedAt
    createdAt
    createdBy
    requestEdit {
      id
      state
      user {
        id
        name
      }
    }
  }
}

fragment policyFragment on Policy {
  id
  title
  status
  createdAt
  updatedAt
  draft {
    id
  }
  requestStatus
  ancestry
  parentId
  references {
    id
    name
  }
  controlCount
  riskCount
  subCount
  resources {
    id
    name
    rating
    totalRating
    visit
    resuploadUrl
    status
    draft {
      id
    }
  }
  risks {
    id
    name
    status
    levelOfRisk
    typeOfRisk
  }
  controls {
    id
    description
    ...control
  }
  businessProcesses {
    id
    name
  }
  bookmarkedBy
}

mutation destroyPolicy($id: ID!) {
  destroyPolicy(input: { id: $id }) {
    clientMutationId
  }
}

mutation createPolicy($input: CreatePolicyInput!) {
  createPolicy(input: $input) {
    clientMutationId
    policy {
      id
    }
  }
}
mutation updateDraftPolicy($input: UpdateDraftPolicyInput!) {
  updateDraftPolicy(input: $input) {
    clientMutationId
  }
}
mutation submitPolicy($input: SubmitDraftPolicyInput!) {
  submitDraftPolicy(input: $input) {
    clientMutationId
  }
}
mutation updatePolicy($input: UpdatePolicyInput!) {
  updatePolicy(input: $input) {
    clientMutationId
  }
}

mutation createSubPolicy($input: CreateSubPolicyInput!) {
  createSubPolicy(input: $input) {
    clientMutationId
  }
}
mutation createUserPVisit($input: CreateUserPolicyVisitInput!) {
  createUserPolicyVisit(input: $input) {
    userPolicyVisit {
      id
      policy {
        id
        title
      }
      recentVisit
      userId
    }
  }
}
mutation updatePolicyVisit($id: ID!) {
  isVisit(input: { originatorId: $id, originatorType: "Policy" }) {
    success
  }
}

query policyDashboard {
  # ADMIN PREPARER - POLICY
  adminPreparerTotalPolicies: policies (
    filter: {}
  ) {
    metadata {
      totalCount
    }
  }
  adminPreparerPreparedPolicies: policies (
    filter: { status_in: ["draft", "waiting_for_review"] }
  ) {
    metadata {
      totalCount
    }
  }
  adminPreparerReviewedPolicies: policies (
    filter: { status_in: ["ready_for_edit", "release", "waiting_for_approval"] }
  ) {
    metadata {
      totalCount
    }
  }

  #ADMIN REVIEWER - POLICY
  adminReviewerTotalPolicies: policies (
    filter: { status_in: ["waiting_for_review", "release", "ready_for_edit", "waiting_for_approval"] }
  ) {
    metadata {
      totalCount
    }
  }
  adminReviewerPreparedPolicies: policies (
    filter: { status_in: ["waiting_for_review"] }
  ) {
    metadata {
      totalCount
    }
  }
  adminReviewerReviewedPolicies: policies (
    filter: { status_in: ["ready_for_edit", "release", "waiting_for_approval"] }
  ) {
    metadata {
      totalCount
    }
  }

  # USER - POLICY
  userTotalPolicies: policies (
    filter: { status_in: ["release", "ready_for_edit", "waiting_for_approval"] }
  ) {
    metadata {
      totalCount
    }
  }

  # CONTROL
  # reviewedControls: controls(filter: { status_eq: release }) {
  #   metadata {
  #     totalCount
  #   }
  # }
  reviewedControls: controls(filter: { policy_controls_id_not_null: true, status_eq: release }) {
    metadata {
      totalCount
    }
  }
  # preparedControls: controls(
  #   filter: { status_in: ["draft", "waiting_for_review"] }
  # ) {
  #   metadata {
  #     totalCount
  #   }
  # }
  preparedControls: controls(filter: { policy_controls_id_not_null: true, status_in: ["draft", "waiting_for_review"] }) {
    metadata {
      totalCount
    }
  }
  # totalControls: controls(filter: {}) {
  #   metadata {
  #     totalCount
  #   }
  # }
  totalControls: controls(filter: { policy_controls_id_not_null: true }) {
    metadata {
      totalCount
    }
  }

  # RISK
  # reviewedRisks: risks(filter: { status_eq: release }) {
  #   metadata {
  #     totalCount
  #   }
  # }
  reviewedRisks: risks(filter: { policy_risks_id_not_null: true, status_eq: release }) {
    metadata {
      totalCount
    }
  }
  # preparedRisks: risks(filter: { status_in: ["draft", "waiting_for_review"] }) {
  #   metadata {
  #     totalCount
  #   }
  # }
  preparedRisks: risks(filter: { policy_risks_id_not_null: true, status_in: ["draft", "waiting_for_review"] }) {
    metadata {
      totalCount
    }
  }
  # totalRisks: risks(filter: {}) {
  #   metadata {
  #     totalCount
  #   }
  # }
  totalRisks: risks(filter: { policy_risks_id_not_null: true }) {
    metadata {
      totalCount
    }
  } 
}

mutation createBookmarkPolicy($input: CreateBookmarkPolicyInput!) {
  createBookmarkPolicy(input: $input) {
    success
  }
}

mutation reviewPolicyDraft($id: ID!, $publish: Boolean!) {
  reviewPolicyDraft(input: { id: $id, publish: $publish }) {
    success
    errors
  }
}
