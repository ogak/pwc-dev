query policies($filter: BaseScalar = {}) {
  policies(filter: $filter) {
    collection {
      id
      title
      status
      policyCategoryId
      parentId
      policyCategory {
        id
        name
      }
      ancestry
      description
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}

query policyTree(
  $filter: BaseScalar = {}
  $isTree: Boolean!
  $limit: Int
  $page: Int
) {
  policies(filter: $filter, limit: $limit, page: $page) {
    collection {
      ...policyBranch
      children @include(if: $isTree) {
        ...policyBranch
        children {
          ...policyBranch
          children {
            ...policyBranch
            children {
              ...policyBranch
              children {
                ...policyBranch
              }
            }
          }
        }
      }
    }
    metadata {
      totalCount
      currentPage
      totalPages
      limitValue
    }
  }
}

fragment policyBranch on Policy {
  id
  title
  parentId
  status
  ancestry
  policyCategory {
    id
    name
  }
}

query policy($id: ID!) {
  policy(id: $id) {
    ...policyFragment
  }
}

fragment policyFragment on Policy {
  id
  title
  status
  policyCategory {
    id
    name
  }
  ancestry
  description
  parentId
  references {
    id
    name
  }
  controlCount
  riskCount
  subCount
  children {
    id
    title
    policyCategory {
      id
      name
    }
    policyCategoryId
    references {
      id
      name
    }
    description
    parentId
  }
  resources {
    id
    name
    rating
    totalRating
    visit
    resuploadUrl
    status
  }
  risks {
    id
    name
    status
  }
  controls {
    id
    description
    ...control
  }
  businessProcesses {
    id
    name
  }
}

query policyCategories($filter: BaseScalar = {}) {
  policyCategories(filter: $filter) {
    collection {
      id
      name
    }
  }
}

mutation destroyPolicy($id: ID!) {
  destroyPolicy(input: { id: $id }) {
    clientMutationId
  }
}

mutation createPolicy($input: CreatePolicyInput!) {
  createPolicy(input: $input) {
    clientMutationId
    policy {
      id
    }
  }
}

mutation updatePolicy($input: UpdatePolicyInput!) {
  updatePolicy(input: $input) {
    clientMutationId
  }
}

mutation createSubPolicy($input: CreateSubPolicyInput!) {
  createSubPolicy(input: $input) {
    clientMutationId
  }
}

query policyDashboard {
  draftPolicies: policies(
    filter: {
      status_in: [
        "draft"
        "waiting_for_approval"
        "ready_for_edit"
        "waiting_for_review"
      ]
    }
  ) {
    metadata {
      totalCount
    }
  }
  releasedPolicies: policies(filter: { status_eq: release }) {
    metadata {
      totalCount
    }
  }
  draftControls: controls(
    filter: {
      status_in: [
        "draft"
        "waiting_for_approval"
        "ready_for_edit"
        "waiting_for_review"
      ]
    }
  ) {
    metadata {
      totalCount
    }
  }
  releasedControls: controls(filter: { status_eq: release }) {
    metadata {
      totalCount
    }
  }
  draftRisks: risks(
    filter: {
      status_in: [
        "draft"
        "waiting_for_approval"
        "ready_for_edit"
        "waiting_for_review"
      ]
    }
  ) {
    metadata {
      totalCount
    }
  }
  releasedRisks: risks(filter: { status_eq: release }) {
    metadata {
      totalCount
    }
  }
}

# query bookmarkPolicies($filter: BaseScalar = {}) {
#   bookmarkPolicies(filter: $filter) {
#     collection {
#       id
#       policy {
#         title
#         id
#       }
#     }
#   }
# }

mutation createBookmarkPolicy($input: CreateBookmarkPolicyInput!) {
  createBookmarkPolicy(input: $input) {
    success
  }
}

# mutation destroyBookmarkPolicy($id: ID!) {
#   destroyBookmarkPolicy(input: { id: $id }) {
#     success
#   }
# }
