query users($filter: BaseScalar = {}, $page: Int, $limit: Int = 1000) {
  users(filter: $filter, page: $page, limit: $limit) {
    collection {
      ...userRowFragment
      policyCategory
      email
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}

query preparerUsers($filter: BaseScalar = {}, $page: Int, $limit: Int = 1000) {
  preparerUsers(filter: $filter, page: $page, limit: $limit) {
    collection {
      ...userRowFragment
      policyCategory
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}
query reviewerUsersStatus(
  $filter: BaseScalar = {}
  $page: Int
  $limit: Int = 1000
) {
  reviewerUsersStatus(filter: $filter, page: $page, limit: $limit) {
    collection {
      ...userRowFragment
      policyCategory
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}

fragment userFragment on User {
  id
  name
  createdAt
  updatedAt
  roles {
    id
    name
  }
  policyCategories {
    id
    name
  }
}

fragment userRowFragment on User {
  ...userFragment
  hasEditAccess
  requestStatus
  mainRole
  department {
    id
    name
  }
  requestEdit {
    id
    state
    user {
      id
      name
    }
  }
  draft {
    id
    objectResult {
      ... on User {
        ...userFragment
      }
    }
  }
}

query user($id: ID!) {
  user(id: $id) {
    ...userRowFragment
  }
}

mutation createUser($input: CreateUserInput!) {
  createUser(input: $input) {
    success
    errors
  }
}

mutation updateUser($input: UpdateUserInput!) {
  updateUser(input: $input) {
    success
    errors
  }
}

mutation adminUpdateUser($input: AdminUpdateUserInput!) {
  adminUpdateUser(input: $input) {
    success
    errors
  }
}

mutation destroyUser($id: ID!) {
  destroyUser(input: { id: $id }) {
    success
    errors
  }
}

mutation reviewUserDraft($id: ID!, $publish: Boolean!) {
  reviewUserDraft(input: { id: $id, publish: $publish }) {
    success
    errors
  }
}

mutation approveRequestEdit($id: ID!, $approve: Boolean!) {
  approveRequestEdit(input: { id: $id, approve: $approve }) {
    success
    errors
  }
}
