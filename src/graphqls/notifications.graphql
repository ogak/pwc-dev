fragment policyNotifs on Policy {
  id
  title
}

fragment businessProcessNotifs on BusinessProcess {
  id
  processName: name
}

fragment controlNotifs on Control {
  id
  description
}

fragment riskNotifs on Risk {
  id
  riskName: name
}

fragment userNotifs on User {
  id
  name
}

query notifications($filter: BaseScalar = {}, $limit: Int = 1000, $page: Int) {
  notifications(filter: $filter, limit: $limit, page: $page) {
    collection {
      id
      createdAt
      isRead
      title
      dataType
      originatorType
      originatorId
      originator {
        ...policyNotifs
        ...businessProcessNotifs
        ...controlNotifs
        ...riskNotifs
        ...userNotifs
      }
      senderUserName
    }
    metadata {
      totalCount
      currentPage
      limitValue
      totalPages
    }
  }
}

query notificationsCount {
  notifications(filter: { is_read_eq: false }) {
    metadata {
      totalCount
    }
  }
  me {
    notifShow
  }
}

mutation destroyBulkNotification($input: DestroyBulkNotificationInput!) {
  destroyBulkNotification(input: $input) {
    clientMutationId
  }
}

mutation isRead($input: IsReadInput!) {
  isRead(input: $input) {
    clientMutationId
  }
}
mutation notifBadges($input: NotifBadgesInput!) {
  notifBadges(input: $input) {
    success
    errors
  }
}
